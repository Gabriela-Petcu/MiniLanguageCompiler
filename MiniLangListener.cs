//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniLang.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MiniLangParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public interface IMiniLangListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] MiniLangParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] MiniLangParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDecl([NotNull] MiniLangParser.FunctionDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDecl([NotNull] MiniLangParser.FunctionDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParamList([NotNull] MiniLangParser.ParamListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParamList([NotNull] MiniLangParser.ParamListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam([NotNull] MiniLangParser.ParamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam([NotNull] MiniLangParser.ParamContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDecl([NotNull] MiniLangParser.VarDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDecl([NotNull] MiniLangParser.VarDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] MiniLangParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] MiniLangParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] MiniLangParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] MiniLangParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] MiniLangParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] MiniLangParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] MiniLangParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] MiniLangParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] MiniLangParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] MiniLangParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] MiniLangParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] MiniLangParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StringLiteralExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringLiteralExpr([NotNull] MiniLangParser.StringLiteralExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StringLiteralExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringLiteralExpr([NotNull] MiniLangParser.StringLiteralExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ModulusExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModulusExpr([NotNull] MiniLangParser.ModulusExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ModulusExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModulusExpr([NotNull] MiniLangParser.ModulusExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentExpr([NotNull] MiniLangParser.AssignmentExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentExpr([NotNull] MiniLangParser.AssignmentExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalExpr([NotNull] MiniLangParser.RelationalExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalExpr([NotNull] MiniLangParser.RelationalExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PostIncrementExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostIncrementExpr([NotNull] MiniLangParser.PostIncrementExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PostIncrementExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostIncrementExpr([NotNull] MiniLangParser.PostIncrementExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntLiteralExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntLiteralExpr([NotNull] MiniLangParser.IntLiteralExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntLiteralExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntLiteralExpr([NotNull] MiniLangParser.IntLiteralExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionCallExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpr([NotNull] MiniLangParser.FunctionCallExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionCallExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpr([NotNull] MiniLangParser.FunctionCallExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditionExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditionExpr([NotNull] MiniLangParser.AdditionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditionExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditionExpr([NotNull] MiniLangParser.AdditionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SubtractionExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubtractionExpr([NotNull] MiniLangParser.SubtractionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SubtractionExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubtractionExpr([NotNull] MiniLangParser.SubtractionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PostDecrementExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostDecrementExpr([NotNull] MiniLangParser.PostDecrementExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PostDecrementExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostDecrementExpr([NotNull] MiniLangParser.PostDecrementExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DivisionExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivisionExpr([NotNull] MiniLangParser.DivisionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DivisionExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivisionExpr([NotNull] MiniLangParser.DivisionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpr([NotNull] MiniLangParser.IdentifierExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpr([NotNull] MiniLangParser.IdentifierExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FloatLiteralExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloatLiteralExpr([NotNull] MiniLangParser.FloatLiteralExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FloatLiteralExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloatLiteralExpr([NotNull] MiniLangParser.FloatLiteralExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpr([NotNull] MiniLangParser.NotExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpr([NotNull] MiniLangParser.NotExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IncDecExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIncDecExpr([NotNull] MiniLangParser.IncDecExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IncDecExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIncDecExpr([NotNull] MiniLangParser.IncDecExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenExpr([NotNull] MiniLangParser.ParenExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenExpr([NotNull] MiniLangParser.ParenExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicationExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicationExpr([NotNull] MiniLangParser.MultiplicationExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicationExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicationExpr([NotNull] MiniLangParser.MultiplicationExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalExpr([NotNull] MiniLangParser.LogicalExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalExpr([NotNull] MiniLangParser.LogicalExprContext context);
}
