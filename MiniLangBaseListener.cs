//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniLang.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMiniLangListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class MiniLangBaseListener : IMiniLangListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] MiniLangParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] MiniLangParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.functionDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDecl([NotNull] MiniLangParser.FunctionDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.functionDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDecl([NotNull] MiniLangParser.FunctionDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.paramList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParamList([NotNull] MiniLangParser.ParamListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.paramList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParamList([NotNull] MiniLangParser.ParamListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParam([NotNull] MiniLangParser.ParamContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParam([NotNull] MiniLangParser.ParamContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarDecl([NotNull] MiniLangParser.VarDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarDecl([NotNull] MiniLangParser.VarDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] MiniLangParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] MiniLangParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] MiniLangParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] MiniLangParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] MiniLangParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] MiniLangParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] MiniLangParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] MiniLangParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.forStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStatement([NotNull] MiniLangParser.ForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.forStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStatement([NotNull] MiniLangParser.ForStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.returnStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] MiniLangParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.returnStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] MiniLangParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StringLiteralExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringLiteralExpr([NotNull] MiniLangParser.StringLiteralExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StringLiteralExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringLiteralExpr([NotNull] MiniLangParser.StringLiteralExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ModulusExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModulusExpr([NotNull] MiniLangParser.ModulusExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ModulusExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModulusExpr([NotNull] MiniLangParser.ModulusExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignmentExpr([NotNull] MiniLangParser.AssignmentExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignmentExpr([NotNull] MiniLangParser.AssignmentExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationalExpr([NotNull] MiniLangParser.RelationalExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationalExpr([NotNull] MiniLangParser.RelationalExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PostIncrementExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostIncrementExpr([NotNull] MiniLangParser.PostIncrementExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PostIncrementExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostIncrementExpr([NotNull] MiniLangParser.PostIncrementExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IntLiteralExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntLiteralExpr([NotNull] MiniLangParser.IntLiteralExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IntLiteralExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntLiteralExpr([NotNull] MiniLangParser.IntLiteralExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionCallExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCallExpr([NotNull] MiniLangParser.FunctionCallExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionCallExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCallExpr([NotNull] MiniLangParser.FunctionCallExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditionExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditionExpr([NotNull] MiniLangParser.AdditionExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditionExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditionExpr([NotNull] MiniLangParser.AdditionExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubtractionExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubtractionExpr([NotNull] MiniLangParser.SubtractionExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubtractionExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubtractionExpr([NotNull] MiniLangParser.SubtractionExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PostDecrementExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostDecrementExpr([NotNull] MiniLangParser.PostDecrementExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PostDecrementExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostDecrementExpr([NotNull] MiniLangParser.PostDecrementExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DivisionExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivisionExpr([NotNull] MiniLangParser.DivisionExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DivisionExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivisionExpr([NotNull] MiniLangParser.DivisionExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierExpr([NotNull] MiniLangParser.IdentifierExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierExpr([NotNull] MiniLangParser.IdentifierExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FloatLiteralExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloatLiteralExpr([NotNull] MiniLangParser.FloatLiteralExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FloatLiteralExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloatLiteralExpr([NotNull] MiniLangParser.FloatLiteralExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExpr([NotNull] MiniLangParser.NotExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExpr([NotNull] MiniLangParser.NotExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IncDecExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIncDecExpr([NotNull] MiniLangParser.IncDecExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IncDecExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIncDecExpr([NotNull] MiniLangParser.IncDecExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenExpr([NotNull] MiniLangParser.ParenExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenExpr([NotNull] MiniLangParser.ParenExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicationExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicationExpr([NotNull] MiniLangParser.MultiplicationExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicationExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicationExpr([NotNull] MiniLangParser.MultiplicationExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalExpr([NotNull] MiniLangParser.LogicalExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalExpr([NotNull] MiniLangParser.LogicalExprContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
